// Test script f√∂r att verifiera Gemini Flash 2.5 integration
// K√∂r med: node test-gemini-integration.js

import { GoogleGenAI } from '@google/genai';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

async function testPromptOptimization() {
  const ai = new GoogleGenAI({
    apiKey: process.env.GEMINI_API_KEY,
  });

  const userPrompt = "Minimalistisk skandinavisk med naturliga element";

  const promptTemplate = `Du √§r en expert p√• att skapa detaljerade bildprompter f√∂r AI-genererade lampdesigner.

ANV√ÑNDARENS √ñNSKAN: "${userPrompt}"

MALL F√ñR LAMPDESIGN:
- Elegant 3D-printed table lampshade
- Maximum 40cm height and 30cm width
- Designed for E27 socket mounting system with integrated fixture attachment ring at base
- Photographed on oak side table
- Scandinavian minimalist interior
- Warm 2700K light emanating through translucent white biodegradable filament
- Professional product photography, soft natural lighting

TILLG√ÑNGLIGA STILAR ATT V√ÑLJA FR√ÖN ELLER KOMBINERA:
organic lattice, geometric mesh, nature-inspired pattern, minimalist grid, Art Deco inspired, Japanese washi paper texture

Baserat p√• anv√§ndarens √∂nskan ovan, skapa en detaljerad och kreativ bildprompt som:
1. Tolkar och inkorporerar anv√§ndarens √∂nskan p√• ett meningsfullt s√§tt
2. V√§ljer och kombinerar l√§mpliga stilar fr√•n listan
3. L√§gger till specifika designdetaljer som passar anv√§ndarens vision
4. Beh√•ller alla tekniska specifikationer fr√•n mallen
5. Skapar en sammanh√§ngande och visuellt tilltalande beskrivning

Svara ENDAST med den f√§rdiga bildprompten p√• engelska, inget annat. Prompten ska vara en enda mening/paragraf.`;

  try {
    console.log('üîÑ Testing Gemini Flash 2.5 prompt optimization...\n');
    console.log('User input:', userPrompt);
    console.log('\nüìù Sending to Gemini Flash 2.5...\n');

    const config = {
      thinkingConfig: {
        thinkingBudget: -1,
      },
    };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      config,
      contents: [
        {
          role: 'user',
          parts: [
            {
              text: promptTemplate,
            },
          ],
        },
      ],
    });

    console.log('Response structure:', JSON.stringify(response, null, 2).substring(0, 500));
    const optimizedPrompt = response.response?.text?.() ||
                            response.candidates?.[0]?.content?.parts?.[0]?.text ||
                            'Error extracting text';

    console.log('‚úÖ Optimized prompt received:\n');
    console.log(optimizedPrompt);
    console.log('\n---');
    console.log('This prompt would then be sent to gemini-2.5-flash-image-preview for image generation.');

  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

testPromptOptimization();