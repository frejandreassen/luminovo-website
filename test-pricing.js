/**
 * Test script f√∂r Gemini-baserad lamppriss√§ttning
 *
 * K√∂r med: node test-pricing.js <s√∂kv√§g-till-bild>
 * Exempel: node test-pricing.js /Users/frej/AI\ business/luminovo-website/public/lampshade-1.png
 */

import { GoogleGenAI } from '@google/genai';
import { readFileSync } from 'fs';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const PRICING_SYSTEM_PROMPT = `Du √§r en expert p√• att priss√§tta 3D-printade lampsk√§rmar baserat p√• deras komplexitet och design.

REFERENSPRISER (utg√•ngspunkter):
- Enkel lampsk√§rm (minimal geometri, f√• detaljer): 2.495 kr
- Medium lampsk√§rm (moderat komplexitet, organiska former): 3.495 kr
- Komplex lampsk√§rm (intrikata detaljer, geometriska m√∂nster, mesh): 4.495 kr
- Mycket komplex lampsk√§rm (h√∂g detaljrikedom, flera lager, avancerad geometri): 5.995 kr

BED√ñMNINGSKRITERIER:
1. **Geometrisk komplexitet** - Hur komplicerad √§r formen? Kurvor, vinklar, symmetri?
2. **Detaljniv√•** - Hur m√•nga sm√• detaljer och m√∂nster finns det?
3. **Printtid** - Mer komplex design = l√§ngre printtid = h√∂gre kostnad
4. **Material√•tg√•ng** - Mesh/√∂ppna strukturer anv√§nder mindre material √§n solida former
5. **Sv√•righetsgrad** - Risk f√∂r misslyckad print √∂kar kostnaden

INSTRUKTIONER:
1. Analysera bilden noggrant
2. Bed√∂m lampans komplexitet baserat p√• kriterierna ovan
3. V√§lj ett pris fr√•n referenspriserna eller ett mellanting
4. Svara ENDAST med ett JSON-objekt i detta format:

{
  "price": 3495,
  "reasoning": "Kort motivering (1-2 meningar p√• svenska)",
  "complexity": "simple|medium|complex|very_complex"
}

Svara BARA med JSON, ingen annan text.`;

async function testPricing(imagePath) {
  try {
    console.log('üîç Analyserar lampbild med Gemini Flash...\n');
    console.log('üìÅ Bilds√∂kv√§g:', imagePath);

    // L√§s bilden
    const imageBuffer = readFileSync(imagePath);
    const base64Image = imageBuffer.toString('base64');

    // Initiera Gemini
    const genai = new GoogleGenAI({
      apiKey: process.env.GEMINI_API_KEY,
    });

    const config = {
      thinkingConfig: {
        thinkingBudget: -1,
      },
    };

    // Skicka request
    const result = await genai.models.generateContent({
      model: 'gemini-2.5-flash',
      config,
      contents: [
        {
          role: 'user',
          parts: [
            { text: PRICING_SYSTEM_PROMPT },
            {
              inlineData: {
                data: base64Image,
                mimeType: 'image/png',
              },
            },
            { text: 'Analysera denna lampsk√§rm och bed√∂m dess komplexitet.' },
          ],
        },
      ],
    });

    const text = result.text || result.candidates?.[0]?.content?.parts?.[0]?.text || '';

    console.log('\nüìù Gemini-svar (r√•data):');
    console.log(text);
    console.log('\n' + '='.repeat(60) + '\n');

    // Parse JSON
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Kunde inte hitta JSON i svaret');
    }

    const pricing = JSON.parse(jsonMatch[0]);

    // Visa resultat
    console.log('üí∞ PRISUPPSKATTNING:');
    console.log('='.repeat(60));
    console.log(`Pris: ${pricing.price.toLocaleString('sv-SE')} kr`);
    console.log(`Komplexitet: ${pricing.complexity}`);
    console.log(`Motivering: ${pricing.reasoning}`);
    console.log('='.repeat(60));

  } catch (error) {
    console.error('‚ùå Fel vid priss√§ttning:', error.message);
    console.error(error);
  }
}

// K√∂r test
const imagePath = process.argv[2];

if (!imagePath) {
  console.error('‚ùå Ange s√∂kv√§g till bild som argument');
  console.log('\nAnv√§ndning: node test-pricing.js <s√∂kv√§g-till-bild>');
  console.log('Exempel: node test-pricing.js ./public/lampshade-1.png');
  process.exit(1);
}

testPricing(imagePath);
